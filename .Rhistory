getwd()
ls()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='valley-fever',
token='C13F23C4C8ABEDBEFE2DC70BD7C9847E',
secret='jzUfn+hGunQZq0fGSQMNNCv9MrJ2KxSRB1ef+TSc')
install.packages('rsconnect')
install.packages('rsconnect')
shiny::runApp()
runApp()
runApp()
# --- Define File Paths ---
# Make sure these paths are correct for the environment where the app is running
# NOTE: Using placeholder paths. You will need to update these to your local file paths.
svi_path <- "california_county.csv"
ces_path <- "CalEnviroScreen_4.0_Results.csv"
prism_path <- "prism"
vf_path <- "valley_fever_cases_by_lhd_2001-2023.csv"
final_dataset<-"final_county_data
# --- Load Raw Data ---
# Add error handling for file loading
tryCatch({
vf_cases <- read_csv(vf_path, skip = 3, col_names = c("county", "year", "cases_raw", "inc_rate_raw"))
pandemic. However that is not possilbe without your help"),
# --- Define File Paths ---
# Make sure these paths are correct for the environment where the app is running
# NOTE: Using placeholder paths. You will need to update these to your local file paths.
svi_path <- "california_county.csv"
ces_path <- "CalEnviroScreen_4.0_Results.csv"
prism_path <- "prism"
vf_path <- "valley_fever_cases_by_lhd_2001-2023.csv"
final_dataset<-"final_county_data"
# --- Load Raw Data ---
# Add error handling for file loading
tryCatch({
vf_cases <- read_csv(vf_path, skip = 3, col_names = c("county", "year", "cases_raw", "inc_rate_raw"))
svi <- read_csv(svi_path)
ces_tract_raw <- read_csv(ces_path, show_col_types = FALSE)
}, error = function(e) {
stop("Error loading initial data files. Please check the file paths and ensure the files exist.")
})
# --- Prepare Helper Tables ---
county_names <- tigris::counties("CA", cb = TRUE, year = 2020) %>%
sf::st_drop_geometry() %>%
mutate(county = str_to_upper(NAME)) %>%
select(COUNTYFP, county)
tract_to_county_lookup <- tigris::tracts("CA", cb = TRUE, year = 2020) %>%
sf::st_drop_geometry() %>%
left_join(county_names, by = "COUNTYFP") %>%
select(tract = GEOID, county)
# Clean CES data (ensure column names are correct)
ces_tract <- ces_tract_raw %>%
clean_names() %>%
transmute(
tract = str_pad(as.character(tract), 11, pad = "0"),
pm25  = pm
)
# Create the Final Dataset for Plots and Models
final_county_data <- vf_county %>%
left_join(svi_county, by = "county") %>%
left_join(county_pollution, by = "county") %>%
left_join(county_climate_summary, by = "county") %>%
mutate(vf_rate = (total_cases / e_totpop) * 100000) %>%
drop_na()
# Create the Final Dataset for Plots and Models
final_county_data <- read_csv("final_county_data")
# Fit the GAM and Add Predictions
# Ensure there's data to model
if(nrow(final_county_data) > 10) { # Check for a minimum number of data points
gam_model <- gam(vf_rate ~ s(rpl_themes) + s(avg_pm25) + s(avg_temp) + s(avg_ppt),
family = nb(), data = final_county_data)
final_county_data$gam_predictions <- predict(gam_model, type = "response")
} else {
gam_model <- NULL
final_county_data$gam_predictions <- NA
warning("Not enough data to fit the GAM model.")
}
# Create the Final Map Data
ca_map_data <- tigris::counties("CA", cb = TRUE, year = 2020) %>%
mutate(county = str_to_upper(NAME)) %>%
left_join(final_county_data, by = "county") %>%
filter(!is.na(vf_rate))
# Create ANNUAL dataset for the time-series plot
vf_annual_data <- vf_cases %>%
mutate(county = str_to_upper(county), county = str_remove(county, " COUNTY"), county = str_trim(county),
cases = as.numeric(cases_raw),
county = case_when(county == "BERKELEY" ~ "ALAMEDA", county == "LONG BEACH" ~ "LOS ANGELES",
county == "PASADENA" ~ "LOS ANGELES", TRUE ~ county)) %>%
filter(!is.na(cases) & !str_detect(county, "TOTAL|\\*")) %>%
group_by(county, year) %>%
summarise(annual_cases = sum(cases, na.rm = TRUE), .groups = "drop") %>%
filter(county %in% final_county_data$county)
# Create STATEWIDE summary for the trend plot
vf_statewide_annual <- vf_annual_data %>%
group_by(year) %>%
summarise(total_statewide_cases = sum(annual_cases, na.rm = TRUE))
write.csv(final_dataset,'final_dataset',row.names=TRUE)
# ===================================================================
# --- 2. USER INTERFACE (UI) ---
# Defines the layout of the dashboard.
# ===================================================================
ui <- dashboardPage(
skin = "purple",
dashboardHeader(title = "Valley Fever Analysis"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
# --- Main Page Content ---
fluidRow(
# Left Column for Controls and Metrics
column(width = 4,
box(width = NULL, solidHeader = TRUE, title = "Welcome",
p("Emerging diseases are an existential threat to humanity; the latest one, the COVID‑19 pandemic, killed millions and cost the United States 16 trillion dollars. It cost the average family of four $200,000—enough to cover their grocery expenses for 17 years. Now we introduce a new threat, Valley Fever. Valley Fever is a fungal disease endemic to large swaths of California and Arizona. Cases have increased ninefold in the past two decades, and it is projected to envelop half of the mainland United States and cost Americans approximately $18 billion annually. Our MSRI‑UP project, in the interest of quantitative justice, was to model the relationship between Valley Fever and social vulnerability. We created a dashboard highlighting key insights of our research, so please feel free to explore what we learned. To learn more about Valley Fever visit: https://www.cdc.gov/valley-fever/ :)")
),
box(width = NULL, solidHeader = TRUE, title = "Key Metrics",
valueBoxOutput("countiesBox", width = 12),
valueBoxOutput("highestRateBox", width = 12)
),
box(width = NULL, solidHeader = TRUE, title = "Map Controls",
selectInput("map_layer",
label = "Select Map Layer:",
choices = c("Valley Fever Rate" = "vf_rate",
"Overall SVI Score" = "rpl_themes",
"Average PM2.5" = "avg_pm25",
"GAM Predictions" = "gam_predictions",
"Total Cases" = "total_cases"),
selected = "vf_rate")
)
),
# Right Column for Visualizations
column(width = 8,
tabBox(width = NULL,
id = "overview_tabs",
tabPanel("Map", leafletOutput("map", height = 600)),
tabPanel("SVI vs. Rate", plotlyOutput("sviPlot", height = 600)),
tabPanel("GAM Performance", plotlyOutput("gamPerfPlot", height = 600)),
tabPanel("GAM Effects", plotOutput("gamEffectsPlot", height = 600))
)
)
),
# --- Annual Trends Section ---
fluidRow(
box(width = 12, solidHeader = TRUE, title = "Total Statewide Valley Fever Cases by Year",
plotlyOutput("statewideTrendPlot")
)
),
fluidRow(
box(width = 4, solidHeader = TRUE, title = "Select an Area for Trend Analysis",
selectInput("county_selector",
label = "Choose an area to see its trend:",
choices = c("All Endemic Counties" = "statewide", sort(unique(final_county_data$county))),
selected = "statewide")
),
box(width = 8, solidHeader = TRUE, title = "Annual Trend for Selected Area",
plotlyOutput("countyTrendPlot")
)
),
fluidRow(
box(width = 12, solidHeader = TRUE, title = "How to Interpret These Charts",
p("The charts on this page show how the number of Valley Fever cases has changed over time in California. The top graph displays the total annual cases for all analyzed counties combined, showing the overall trend since 2001."),
p("The bottom graph allows you to focus on a specific area. Use the dropdown menu to see the annual case trend for an individual county or view the combined data for all endemic counties.")
)
),
# --- START: NEWLY ADDED TEXT BLOCK ---
fluidRow(
box(width = 12, solidHeader = TRUE, title = "What can we do?",
p("We can learn lessons from the COVID-19 Pandemic and take steps to prevent the next
pandemic. However that is not possilbe without your help"),
tags$ul(
tags$li(strong("Information:"), "We cannot solve a problem we cannot see, we urge you keep up with latest developments of this disease from trusted institutions like the NIH and CDC, check out more here:  https://www.cdc.gov/valley-fever/"),
tags$li(strong("Policy:"), "Call you representative, and senator, let them know how much you care about your health and that of your loved ones. At town meetings, ask them to explain how they plan to support policies that strengthen, not defund, vaccine develop and treatments. Visit this website to know who your representative is:https://www.house.gov/representatives/find-your-representative"),
tags$li(strong("Tell your friends and family:"), "Share what you know with friends and family and ask them to share it with their friends too. The more awareness we have on this disease the more resources we extend towards its erradication"),
)
)
)
# --- END: NEWLY ADDED TEXT BLOCK ---
)
)
# ===================================================================
# --- 3. SERVER LOGIC ---
# Contains the R code to generate all the outputs.
# ===================================================================
server <- function(input, output) {
# --- Value Box Outputs ---
output$countiesBox <- renderValueBox({
valueBox(value = nrow(final_county_data),
subtitle = "Counties Analyzed",
icon = icon("map-marker-alt"), color = "purple")
})
output$highestRateBox <- renderValueBox({
highest_rate <- final_county_data %>% filter(vf_rate == max(vf_rate))
valueBox(value = comma(round(highest_rate$vf_rate, 0)),
subtitle = paste("Highest Rate (per 100k) in", str_to_title(highest_rate$county)),
icon = icon("arrow-up"), color = "red")
})
# --- Overview Page Outputs ---
output$map <- renderLeaflet({
req(ca_map_data)
selected_var <- input$map_layer
# Ensure the selected variable exists in the data
if (!selected_var %in% names(ca_map_data)) return(NULL)
pal <- colorNumeric(palette = "viridis", domain = ca_map_data[[selected_var]], na.color = "transparent")
labels <- sprintf(
"<strong>%s</strong><br/>%s: %s",
ca_map_data$county,
str_to_title(str_replace_all(selected_var, "_", " ")),
format(ca_map_data[[selected_var]], big.mark = ",", digits = 4)
) %>% lapply(htmltools::HTML)
leaflet(ca_map_data) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~pal(get(selected_var)), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7, label = labels
) %>%
addLegend(pal = pal, values = ~get(selected_var), opacity = 0.7,
title = str_to_title(str_replace_all(selected_var, "_", " ")),
position = "bottomright")
})
output$sviPlot <- renderPlotly({
p <- ggplot(final_county_data, aes(x = rpl_themes, y = vf_rate,
text = paste("County:", county,
"<br>Population:", comma(e_totpop),
"<br>VF Rate:", round(vf_rate, 1)))) +
geom_point(alpha = 0.7, color = "dodgerblue") +
geom_smooth(method = "lm", se = FALSE, color = "firebrick", linetype = "dashed") +
labs(title = "Valley Fever Rate vs. SVI Score",
x = "Overall SVI Score", y = "Valley Fever Rate (per 100,000)") +
theme_minimal()
ggplotly(p, tooltip = "text")
})
output$gamPerfPlot <- renderPlotly({
# Only render if predictions exist
req(final_county_data$gam_predictions)
p <- ggplot(final_county_data, aes(x = gam_predictions, y = vf_rate,
text = paste("County:", county,
"<br>Actual Rate:", round(vf_rate, 1),
"<br>Predicted Rate:", round(gam_predictions, 1)))) +
geom_point(alpha = 0.7, color = "purple") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
labs(title = "GAM Performance: Predicted vs. Actual VF Rate",
x = "Predicted Valley Fever Rate (by GAM)", y = "Actual Valley Fever Rate") +
theme_minimal()
ggplotly(p, tooltip = "text")
})
output$gamEffectsPlot <- renderPlot({
# Only render if model exists
req(gam_model)
gratia::draw(gam_model)
})
# --- Annual Trends Page Outputs ---
output$statewideTrendPlot <- renderPlotly({
p <- ggplot(vf_statewide_annual, aes(x = year, y = total_statewide_cases, group = 1,
text = paste("Year:", year, "<br>Total Cases:", comma(total_statewide_cases)))) +
geom_line(color = "#6f42c1") +
geom_point(color = "#6f42c1") +
labs(title = "Total Reported Valley Fever Cases in California (2001-2023)",
x = "Year", y = "Total Annual Cases") +
scale_y_continuous(labels = comma) +
theme_minimal()
ggplotly(p, tooltip = "text")
})
output$countyTrendPlot <- renderPlotly({
if (input$county_selector == "statewide") {
plot_data <- vf_statewide_annual
p <- ggplot(plot_data, aes(x = year, y = total_statewide_cases, group = 1,
text = paste("Year:", year, "<br>Total Cases:", comma(total_statewide_cases)))) +
labs(title = "Combined Annual Trend for All Endemic Counties",
x = "Year", y = "Total Annual Cases") +
scale_y_continuous(labels = comma)
} else {
plot_data <- vf_annual_data %>%
filter(county == input$county_selector)
p <- ggplot(plot_data, aes(x = year, y = annual_cases, group = 1,
text = paste("Year:", year, "<br>Cases:", comma(annual_cases)))) +
labs(title = paste("Annual Cases in", str_to_title(input$county_selector), "County"),
x = "Year", y = "Number of Cases")
}
p <- p +
geom_line(color = "darkorange") +
geom_point(color = "darkorange") +
theme_minimal()
ggplotly(p, tooltip = "text")
})
}
# ===================================================================
# --- 4. RUN THE APPLICATION ---
# ===================================================================
shinyApp(ui, server)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='valley-fever',
token='C13F23C4C8ABEDBEFE2DC70BD7C9847E',
secret='jzUfn+hGunQZq0fGSQMNNCv9MrJ2KxSRB1ef+TSc')
rsconnect::deployApp()
runApp()
getwd()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
rlang::last_trace()
rlang::last_trace()
rsconnect::deployApp()
rsconnect::deployApp()
install.packages("shinylive")
shinylive::export(".","docs")
runApp('~/Downloads/DashNew 2')
